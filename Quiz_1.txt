Тема: Примитивы синхронизации в Go.

Вопрос: Пропишите описание одному виду с пакета sync и приведите к нему пример.

Ответ: Помимо каналов и мьютексов другим важным примитивом синхронизации является sync.WaitGroup.
Это пакет синхронизации и там есть метод WaitGroup. Он позволяет взаимодействующим группам совместно
ожидать пороговое событие прежде чем продолжить самостоятельно. Это полезно в 2 случаях:
1) При очистке можно исп-ть sync.WaitGroup, чтобы гарантировать, что все горутины (включая основную main) ожидают пока все не завершаются.
2) В циклическом алгоритме, который включает набор процедур, где некоторое время работают независимо, затем все ждут на барьере, чтобы продолжить самостоятельно.
Этот шаблон может повторяться много раз. Говоря общими словами, то sync.WaitGroup позволяет определить группу горутин, которые должны выполняться вместе как одна группа.
Там можно установить блокировку, которая приостановит выполнение функции, пока остальные не завершат действия всей группы горутин.
Т.е Часто алогоритм сводится обычно к следующему при работе:
1) Инициализировать (создать) WaitGroup(у) -> Пример: var wg sync.WaitGroup
2) Добавить количество горутин в эту группу -> Пример: wg.Add(n) (n - счетчик количества активных горутин должно быть положительным)
Если счетски n становится равен 0, то все горутины заблокированные в группе (Wait) освобождаются.
3) Внутри функции (обычно при её завершении) указывается, что сработавшая горутина завершила свою работу в данной группе. -> Пример: wg.Done()
Т.е как только срабатывает wg.Done(), то счетчик в группе уменьшается на 1
4) Создаем наши n горутин и запускаем их у созданной функции к которой они относятся
5) После всего мы ожидаем завершение всех горутин, чтобы потом продолжить далее -> Пример: wg.Wait()  
Данная фукнция (Wait) блокирует дальнейшую работу пока счеткик не станет 0.

Код примера:
package main

import (
	"fmt"
	"sync"
	"time"
)

var wg sync.WaitGroup

func sayHello(name string) {
	defer wg.Done() // decrease WaitGroup counter by one as function is finished
	fmt.Println("Hello", name)
	time.Sleep(time.Second)
	fmt.Println("See you next time", name)
}

func main() {
	wg.Add(3) // Устанавливает счетчик (количество активных горутин)
	go sayHello("Temirbolat")
	go sayHello("Anuar")
	go sayHello("Andrew")
	wg.Wait() // блокирует дальнейшую работу кода пока счеткик не станет 0.
	fmt.Println("The programm is out")
}
